

# To convert place name to (lat,lon) 
# Eg. Nepal -> (31.2496266,73.6632218)
OPEN_WEATHER_MAP = b6dece846bbb74f864220bc44a524c54

EARTH_DATA_API = eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6ImFiaGlzaGVrMyIsImV4cCI6MTc2NDU0NzE5OSwiaWF0IjoxNzU5MzI4NDQzLCJpc3MiOiJodHRwczovL3Vycy5lYXJ0aGRhdGEubmFzYS5nb3YiLCJpZGVudGl0eV9wcm92aWRlciI6ImVkbF9vcHMiLCJhY3IiOiJlZGwiLCJhc3N1cmFuY2VfbGV2ZWwiOjN9.oJKte9VvL6zSv3zln0m18fjYsDOBtzsLDorJR-0xCznkt2eUDe9r-Rt723nKnyaU0ut5WXGIxBx3BU3MICXu97Zhj7BsWyHP2j57ZswKpOsnYOnYOmtr2f--bvMOal9qGBj3tPgd4XPzKAJx7mHp1iYdAzw1IuqbSxjPt_H6foR0fuE-1E8laKm9WP-axNwuOef-Ww0BHh2G6tY2Uv1KAp9uPSu-NBrZ5T4hGgdMcSxZDdeC1X9f5iMEllWUkjw7gB-LuqUDO3IuMqgasd7ZQ3FLdxxh9aYG3Bfq6lcbu3cF1ZO3ZPL1IrX-iCDHxfAkPMmXILq91jonjHJIpNGOmQ

# For air quality
AIR_QUALITY_INDEX = f2e156139b769f19129ad735c7600fb7cecf67be

# https://api.waqi.info/feed/geo:latitude;longitude/?token=AIR_QUALITY_INDEX 

# Geocoding API
# http://api.openweathermap.org/geo/1.0/direct?q={city name},{state code},{country code}&limit={limit}&appid={API key}
# Parameters
# q	required	City name, state code (only for the US) and country code divided by comma. Please use ISO 3166 country codes.
# appid	required	Your unique API key (you can always find it on your account page under the "API key" tab)
# limit	optional	Number of the locations in the API response (up to 5 results can be returned in the API response)


# To check percentage of different chemicals in soil
SOIL_GRID_DATA = fe49sdfdg454sdsdsd2343eb


GOOGLE_MAP_API_KEY = AIzaSyDj-IdLsByibFgpbXyl5Zt24xUgHecYAX0


#   // NASA POWER API Example
#   // Parameters: Surface Temperature (TS), Solar Radiation (ALLSKY_SFC_SW_DWN)
#   // const fetchLatestPowerData = async () => {
#   //   const latitude = 26.453;
#   //   const longitude = 87.272;

#   //   // Fetch last 7 days
#   //   const today = new Date();
#   //   const past = new Date();
#   //   past.setDate(today.getDate() - 10);

#   //   const startStr = `${past.getFullYear()}${String(past.getMonth() + 1).padStart(2,'0')}${String(past.getDate()).padStart(2,'0')}`;
#   //   const endStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2,'0')}${String(today.getDate()).padStart(2,'0')}`;

#   //   const parameters = "TS,ALLSKY_SFC_SW_DWN";

#   //   const url = `https://power.larc.nasa.gov/api/temporal/daily/point?parameters=${parameters}&start=${startStr}&end=${endStr}&latitude=${latitude}&longitude=${longitude}&community=AG&format=JSON`;

#   //   try {
#   //     const response = await fetch(url);
#   //     const data = await response.json();

#   //     if (!data.properties || !data.properties.parameter) {
#   //       console.error("No data available in this range.");
#   //       return null;
#   //     }

#   //     const TS = data.properties.parameter.TS;
#   //     // const soilMoisture = data.properties.parameter.SOILWATER_10CM;
#   //     const radiation = data.properties.parameter.ALLSKY_SFC_SW_DWN;

#   //     // Find the **latest date with data**
#   //     const latestDate = Object.keys(TS).reverse().find(date => TS[date] !== null);
#   //     console.log(`Latest available date: ${latestDate}`);
#   //     console.log(`Temperature: ${TS[latestDate]} °C`);
#   //     // console.log(`Soil Moisture (10cm): ${soilMoisture[latestDate]}`);
#   //     console.log(`Solar Radiation: ${radiation[latestDate]} MJ/m²/day`);

#   //     return {
#   //       date: latestDate,
#   //       TS: TS[latestDate],
#   //       // soilMoisture: soilMoisture[latestDate],
#   //       radiation: radiation[latestDate]
#   //     };
#   //   } catch (error) {
#   //     console.error("Error fetching POWER data:", error);
#   //     return null;
#   //   }
#   // };

#   // fetchLatestPowerData();




#   // SoilGrids API Example
#   // No API key required

#   // const fetchSoilGridsData = async () => {
#   //   const latitude = 26.452;
#   //   const longitude = 87.271;

#   //   // Properties: phh2o (pH), ocd (organic carbon density), n (nitrogen)
#   //   const properties = ["phh2o", "ocd", "cec"];

#   //   for (const prop of properties) {
#   //     const url = `https://rest.isric.org/soilgrids/v2.0/properties/query?lon=${longitude}&lat=${latitude}&property=${prop}`;

#   //     try {
#   //       const response = await fetch(url);
#   //       const data = await response.json();
#   //       console.log(`SoilGrids ${prop} Data:`, data);
#   //     } catch (error) {
#   //       console.error(`Error fetching ${prop}:`, error);
#   //     }
#   //   }
#   // };

#   // fetchSoilGridsData();
